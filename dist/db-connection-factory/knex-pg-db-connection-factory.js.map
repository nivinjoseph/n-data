{"version":3,"file":"knex-pg-db-connection-factory.js","sourceRoot":"","sources":["../../src/db-connection-factory/knex-pg-db-connection-factory.ts"],"names":[],"mappings":";;AACA,0DAAiD;AACjD,8BAA4B;AAC5B,6BAA6B;AAC7B,yBAAyB;AACzB,0DAAmE;AAInE,MAAa,yBAAyB;IAiBlC,YAAmB,MAAmC;QAfrC,YAAO,GAAgB;YACpC,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE;gBACF,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,EAAE;aACV;SAEJ,CAAC;QAGM,gBAAW,GAAG,KAAK,CAAC;QAOxB,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EACxC;YACI,MAAM,gBAAgB,GAAG,MAAM,CAAC;YAChC,mBAAK,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;YAC9E,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,gBAAgB,CAAC,IAAI,EAAE,CAAC;YAElD,EAAE,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC;SAC1B;aAED;YACI,MAAM,gBAAgB,GAAuB,MAA4B,CAAC;YAC1E,mBAAK,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE;iBACxE,kBAAkB,CAAC;gBAChB,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;aACrB,CAAC,CAAC;YAEP,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG;gBACtB,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE;gBAClC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE;gBAClC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,EAAE;gBAC1C,IAAI,EAAE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,EAAE;gBACtC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,EAAE;aAC7C,CAAC;SACL;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAGM,MAAM;QAET,IAAI,IAAI,CAAC,WAAW;YAChB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,qCAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7D,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,OAAO;QAEV,IAAI,IAAI,CAAC,WAAW;YAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAE7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAEzC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA1ED,8DA0EC","sourcesContent":["import { DbConnectionFactory } from \"./db-connection-factory\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport * as Knex from \"knex\";\nimport * as Pg from \"pg\";\nimport { ObjectDisposedException } from \"@nivinjoseph/n-exception\";\nimport { DbConnectionConfig } from \"./db-connection-config\";\n\n// public\nexport class KnexPgDbConnectionFactory implements DbConnectionFactory\n{\n    private readonly _config: Knex.Config = {\n        client: \"pg\",\n        pool: {\n            min: 2,\n            max: 10\n        }\n        // debug: true\n    };\n\n    private _knex: Knex;\n    private _isDisposed = false;\n    \n    \n    public constructor(connectionString: string);\n    public constructor(connectionConfig: DbConnectionConfig);\n    public constructor(config: string | DbConnectionConfig)\n    {\n        if (config && typeof config === \"string\")\n        {\n            const connectionString = config;\n            given(connectionString, \"connectionString\").ensureHasValue().ensureIsString();\n            this._config.connection = connectionString.trim();\n            \n            Pg.defaults.ssl = true; // this is a workaround\n        }\n        else\n        {\n            const connectionConfig: DbConnectionConfig = config as DbConnectionConfig;\n            given(connectionConfig, \"connectionConfig\").ensureHasValue().ensureIsObject()\n                .ensureHasStructure({\n                    host: \"string\",\n                    port: \"string\",\n                    database: \"string\",\n                    username: \"string\",\n                    password: \"string\"\n                });\n            \n            this._config.connection = {\n                host: connectionConfig.host.trim(),\n                port: connectionConfig.port.trim(),\n                database: connectionConfig.database.trim(),\n                user: connectionConfig.username.trim(),\n                password: connectionConfig.password.trim()\n            };\n        }\n\n        this._knex = Knex(this._config);\n    }\n    \n    \n    public create(): Promise<object>\n    {\n        if (this._isDisposed)\n            return Promise.reject(new ObjectDisposedException(this));\n        \n        return Promise.resolve(this._knex);\n    }\n    \n    public dispose(): Promise<void>\n    {\n        if (this._isDisposed)\n            return Promise.resolve();    \n        \n        this._isDisposed = true;\n        \n        const knex = this._knex;\n        this._knex = null;\n        return new Promise<void>((resolve, reject) =>\n        {\n            knex.destroy().then(() => resolve()).catch((err) => reject(err));\n        });\n    }\n}"]}