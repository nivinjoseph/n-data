{"version":3,"file":"knex-pg-db.js","sourceRoot":"","sources":["../../src/db/knex-pg-db.ts"],"names":[],"mappings":"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","sourcesContent":["import { Db } from \"./db\";\nimport { given } from \"n-defensive\";\nimport \"n-ext\";\nimport * as Knex from \"knex\";\nimport { DbException } from \"../exceptions/db-exception\";\nimport { OperationType } from \"../exceptions/operation-type\";\nimport { DbConnectionFactory } from \"../db-connection-factory/db-connection-factory\";\nimport { TransactionProvider } from \"../unit-of-work/transaction-provider\";\nimport { inject } from \"n-ject\";\nimport { QueryResult } from \"./query-result\";\n\n\n// public\n@inject(\"DbConnectionFactory\")\nexport class KnexPgDb implements Db\n{\n    private readonly _dbConnectionFactory: DbConnectionFactory;\n    \n    \n    public constructor(dbConnectionFactory: DbConnectionFactory)\n    {\n        given(dbConnectionFactory, \"dbConnectionFactory\").ensureHasValue();\n        \n        this._dbConnectionFactory = dbConnectionFactory;\n    }\n    \n    \n    public executeQuery(sql: string, ...params: Array<any>): Promise<QueryResult>\n    {\n        let promise = new Promise<QueryResult>((resolve, reject) =>\n        {\n            this._dbConnectionFactory.create()\n                .then((knex: Knex) =>\n                {\n                    knex.raw(sql, params).asCallback((err, result) =>\n                    {\n                        if (err)\n                        {\n                            reject(new DbException(OperationType.query, sql, params, err));\n                        }\n                        else\n                        {\n                            resolve(new QueryResult(result.rows));\n                        }\n                    });\n                })\n                .catch(err => reject(err));\n        });\n\n        return promise;\n    }\n    \n    public executeCommand(sql: string, ...params: any[]): Promise<void>\n    {\n        let promise = new Promise<void>((resolve, reject) =>\n        {\n            this._dbConnectionFactory.create()\n                .then((knex: Knex) =>\n                {\n                    knex.raw(sql, params).asCallback((err) =>\n                    {\n                        if (err)\n                        {\n                            reject(new DbException(OperationType.command, sql, params, err));\n                        }\n                        else\n                        {\n                            resolve();\n                        }\n                    });\n                })\n                .catch(err => reject(err));\n        });\n\n        return promise;\n    }\n    \n    public executeCommandWithinUnitOfWork(transactionProvider: TransactionProvider, sql: string, ...params: any[]): Promise<void>\n    {        \n        let promise = new Promise<void>((resolve, reject) =>\n        {\n            transactionProvider.getTransactionScope()\n                .then((trx: Knex.Transaction) =>\n                {\n                    trx.raw(sql, params).asCallback((err) =>\n                    {\n                        if (err)\n                        {\n                            reject(new DbException(OperationType.command, sql, params, err));\n                        }\n                        else\n                        {\n                            resolve();\n                        }\n                    });\n                })\n                .catch(err => reject(err));\n        });\n\n        return promise;\n    }\n}"]}